==============================================
Angular Basic Questions and Answers:
================================================
1. What is Angular? Why was it introduced?
----------------------------------------------
Angular is an open-source JavaScript framework entirely written in TypeScript. 

Angular was introduced to create Single Page applications. 

This framework brings structure and consistency to web applications and provides excellent scalability and maintainability.

2. What are the main features of Angular?
---------------------------------------------
    Two-way data binding: Synchronizes data between the model and the view automatically.
	
    Dependency injection: Manages and injects dependencies efficiently to enhance modularity.
	
    Modularization: Break down the application into smaller, reusable modules.
	
    Templating: Uses templates to define the view, providing dynamic and efficient UI updates.
	
    RESTful API handling: Simplifies interaction with RESTful services and APIs.
	
3. What is a component in Angular?
------------------------------------
A component is a fundamental building block of Angular applications.

It consists of a TypeScript class, an HTML template, and optional CSS styles.

Example: Creating a reusable header component for your application.

How do you create a component using CLI:

$ 

4. What are decorators in Angular? 
-------------------------------------
Decorators are a design pattern or functions that define how Angular features work. 

They are used to make prior modifications to a class, service, or filter. Angular supports four types of decorators, they are:

    Class Decorators
    Property Decorators
    Method Decorators
    Parameter Decorators
	
5. Explain the purpose of @Component decorator in Angular.
--------------------------------------------------------------
    Defining the Component: It designates a class as an Angular component and provides metadata about the component.
	
    Template Association: Links the component with its HTML template, defining the view.
	
    Style Binding: Associates the component with its CSS styles to encapsulate and manage styling.
	
    Selector Definition: Defines a custom HTML tag (selector) that represents the component in the application.
	
    Dependency Injection Configuration: Specifies the providers for the component, providing dependency injection.
	
Sample Code:
----------
@Component({
    selector: 'app-header',
    templateUrl: './header.component.html',
    styleUrls: ['./header.component.css']
})

6. What is a module in Angular?
-------------------------------------

A module is a container for a cohesive group of components, directives, pipes, and services. 

It is defined using the @NgModule decorator.

7. What is Angular CLI?
-------------------------------
Angular CLI is a command-line interface tool that helps automate the development workflow, 

including creating, building, testing, and deploying Angular applications.

Example :

$ ng build -> Compiles an Angular application or library into an output directory named dist/ at the given output path.

$ ng new demo -> Creates a new Angular project.

$ ng serve -> Builds and serves your application, rebuilding on file changes.

7. What is a directive in Angular?
-------------------------------------
Directives are special markers on a DOM element that tell Angular to do something to that DOM element or its children.

Example: Adding a custom behavior to an element, like changing its background color on hover.

8. What is a service in Angular?
-------------------------------------
A service is a class that encapsulates reusable logic, which can be shared across different components of an Angular application. Services are typically used for data fetching, business logic, and other operations that need to be shared.

Example: Fetching data from an API and sharing it across multiple components.

==================================================
9. Explain two-way data binding in Angular?
===================================================
Two-way data binding allows automatic synchronization of data between the model (component class) and the view (HTML template). 

Angular uses ngModel directive to achieve this.

Example: Updating a user input field and reflecting the changes in the component class and vice versa.

import { Component } from '@angular/core';

@Component({
    selector: 'app-user-input',
    templateUrl: './user-input.component.html',
    styleUrls: ['./user-input.component.css']
})
export class UserInputComponent {
    userInput: string = '';

    updateInput(value: string) {
        this.userInput = value;
    }
}

10. What is dependency injection in Angular?
---------------------------------------------------
Dependency injection (DI) is a design pattern where a class receives its dependencies from an external source rather than creating them itself. 

Angular’s DI framework allows you to inject services into components and other services.


11. How do you create a service in Angular?
----------------------------------------------
A service can be created using Angular CLI or manually by creating a class decorated with @Injectable().

Example: Creating a data fetching service.

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
    providedIn: 'root'
})
export class DataFetchingService {
    private apiUrl = 'https://api.example.com/data'; 

    constructor(private http: HttpClient) { }

    fetchData(): Observable<any> {
        return this.http.get < any > (this.apiUrl);
    }
}

12. What is an Angular router?
-------------------------------------
The Angular router is a library that helps to manage navigation and routing in Angular applications, enabling single-page application (SPA) behavior.

============================================
Angular Intermediate Interview Questions
================================================

1. How can you pass data between components in Angular?
------------------------------------------------------
Data can be passed between components using Input and Output decorators, services, or router state.

Example: Passing data from a parent component to a child component using @Input decorator.

2. Explain lazy loading in Angular?
------------------------------------------

Lazy loading is a technique where feature modules are loaded on demand, reducing the initial load time of the application.

3. What are Angular lifecycle hooks?
----------------------------------------
Angular lifecycle hooks are methods that allow you to tap into key moments in a component’s lifecycle. Here are the main lifecycle hooks:

    ngOnInit(): Called once after the component’s data-bound properties have been initialized.
	
    ngOnChanges(changes: SimpleChanges): Called whenever one or more data-bound input properties change.
	
    ngDoCheck(): Called during every change detection run, allowing you to implement your own change detection.
	
    ngAfterContentInit(): Called once after Angular projects external content into the component’s view.
	
    ngAfterContentChecked(): Called after every check of projected content.
	
    ngAfterViewInit(): Called once after the component’s view (and child views) has been initialized.
	
    ngAfterViewChecked(): Called after every check of the component’s view (and child views).
	
    ngOnDestroy(): Called just before Angular destroys the component, allowing you to clean up resources.

4. What is a pipe in Angular?
---------------------------------
A pipe is a way to transform data in the template. 

Angular provides built-in pipes like DatePipe, UpperCasePipe, and also allows custom pipes.

5. How do you optimize Angular applications?
----------------------------------------------

Optimization techniques include using AOT (Ahead-of-Time) compilation, lazy loading modules, OnPush change detection strategy, and minification.

6. How do you implement authentication in Angular?
--------------------------------------------------------

Authentication can be implemented using JWT tokens, Angular guards, and interceptors to manage login and secure routes.

Example: Securing a route with an AuthGuard.

import { Injectable } from '@angular/core';

@Injectable({
    providedIn: 'root'
})
export class AuthService {

    constructor() { }

    isLoggedIn(): boolean {
        // Implement your authentication logic here
        // For example, check if the user token exists in localStorage
        return !!localStorage.getItem('userToken');
    }

    // Add other auth-related methods like login, logout, etc.
}

7. What is the purpose of NgModule in Angular?
-----------------------------------------------
The purpose of NgModule in Angular is to organize an application into cohesive blocks of functionality by grouping related components, 

directives, pipes, and services. NgModule defines a compilation context for these elements, providing modularity and maintainability. 

8. What is an Observable in RxJS?
-----------------------------------
In RxJS, an observable is a function that is used to create an observer and attaches it to the source where values are expected from. 

For example, clicks, mouse events from a DOM element or an Http request, etc. afre the example of RxJS observable. 

Observable gives us the idea of an invokable collection of future values or events. 

It facilitates us to make asynchronous data streams using observable sequences or just called observables, too.

9. What is the difference between RxJS Observables and Promises?
-----------------------------------------------------------------
-> Observables are used to run asynchronously, and we get the return value multiple times.

	Promises are used to run asynchronously, and we get the return value only once.
	
-> Observables are lazy. Promises are not lazy.

-> Observables can be canceled. Promises cannot be canceled.

-> Observables provide multiple future values. Promises provide a single future value.

10. What is the HttpClient module?
---------------------------------------

The HttpClient module is a feature-rich way to work with HTTP in Angular applications.

 It allows developers to inject the HttpClient service into components or services to make HTTP requests.

11. How To Use HttpClient in Angular?
------------------------------------
In Angular, the HttpClient module is used to make HTTP requests to backend services. 

It simplifies communication with APIs, allowing developers to interact with RESTful services, send and receive data, and handle responses effectively.

-> Importing HttpClientModule

import { HttpClientModule } from '@angular/common/http';

-> Injecting HttpClient in the service

Code:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
    providedIn: 'root'
})
export class DataService {
    private apiUrl = 'https://api.example.com/data'; // Replace with your API URL

    constructor(private http: HttpClient) { }
}

->Making HTTP Requests

GET Request: A GET request retrieves data from the server.
Syntax:

getData(): Observable < any > {
    return this.http.get(this.apiUrl);
}

 POST Request: POST request sends data to the server to create a new resource.

Syntax:

postData(payload: any): Observable < any > {
    return this.http.post(this.apiUrl, payload);
} 
     PUT Request

A PUT request updates an existing resource on the server.

Syntax:

updateData(id: number, payload: any): Observable < any > {
    return this.http.put(`${this.apiUrl}/${id}`, payload);
} 

    DELETE Request

A DELETE request removes a resource from the server.

Syntax:

deleteData(id: number): Observable < any > {
    return this.http.delete(`${this.apiUrl}/${id}`);
} 

Handling Response:
-----------------
Syntax:

this.dataService.getData().subscribe(
    response => {
        console.log('Response:', response);
    },
    error => {
        console.error('Error:', error);
    }
)
===================================================
Angular Scenario Based Interview Questions
=====================================================
1. Scenario: Handling Data from Multiple APIs
------------------------------------------------------
    Question: You are developing an Angular application that needs to fetch data from multiple APIs and display them together on the same page. 
	
	How would you handle asynchronous API calls and ensure the data is displayed after all responses are received?
	
    Answer: I would use the RxJS forkJoin operator to handle multiple API calls concurrently. 
	
	This ensures that all API responses are received before processing the data. Here’s how I would implement it:

    import { forkJoin } from 'rxjs';
    import { HttpClient } from '@angular/common/http';

    constructor(private http: HttpClient) {}

    getData() {
      const api1$ = this.http.get('https://api1.example.com');
      const api2$ = this.http.get('https://api2.example.com');

      forkJoin([api1$, api2$]).subscribe(
        ([api1Response, api2Response]) => {
          // Process data from both APIs
          this.processData(api1Response, api2Response);
        },
        error => {
          console.error('Error fetching data', error);
        }
      );
    }
2. Scenario: Optimizing Angular Performance with Lazy Loading
---------------------------------------------------------------------
    Question: Your Angular application is getting slower due to a large number of modules and components. 
	
	How would you optimize the application’s performance?
    Answer: One way to optimize an Angular application is by implementing lazy loading to load modules only when needed. 
	
	This reduces the initial bundle size, improving load times. Here’s an example of setting up lazy loading in Angular:

    // app-routing.module.ts
    const routes: Routes = [
      { path: 'feature', loadChildren: () => import('./feature/feature.module').then(m => m.FeatureModule) }
    ];

    Explanation: By using the loadChildren property, Angular will load the FeatureModule only when the user navigates to the /feature route. 
	This improves the app’s performance by deferring the loading of non-essential modules.

3. Scenario: Handling Form Validation in Reactive Forms
------------------------------------------------------------
    Question: You have a form where the user enters their email, and you need to ensure that it is both valid and unique (not already in use). 
	
	How would you implement this validation using Angular Reactive Forms?
	
    Answer: I would use Reactive Forms with custom synchronous and asynchronous validators. 
	
	Here’s how I would implement both email format validation and uniqueness check:

    import { FormBuilder, FormGroup, Validators } from '@angular/forms';
    import { of } from 'rxjs';
    import { map, delay } from 'rxjs/operators';

    constructor(private fb: FormBuilder) {}

    emailForm: FormGroup = this.fb.group({
      email: ['', [Validators.required, Validators.email], [this.uniqueEmailValidator.bind(this)]]
    });

    uniqueEmailValidator(control: AbstractControl) {
      const emailsInUse = ['test@example.com', 'user@example.com'];
      return of(emailsInUse.includes(control.value)).pipe(
        delay(500),
        map(isInUse => (isInUse ? { emailInUse: true } : null))
      );
    }

    Explanation: The Validators.email ensures the entered email is valid, while the uniqueEmailValidator checks asynchronously 
	whether the email is already in use. If so, it returns an error, otherwise, it passes validation.

4. Scenario: Debugging Change Detection Issues
------------------------------------------------
    Question: You notice that a component is not updating as expected when data changes. 
	
	How would you debug and resolve the issue related to Angular’s change detection mechanism?
	
    Answer: First, I would check if the component is using OnPush change detection strategy:

    @Component({
      selector: 'app-sample',
      templateUrl: './sample.component.html',
      changeDetection: ChangeDetectionStrategy.OnPush
    })

    If the OnPush strategy is being used, Angular only checks for changes when an input reference changes. 
	
	If the data is updated by mutation, Angular will not detect the change. In this case, I would either:
        Ensure the object reference is changed, or
        Manually trigger change detection using ChangeDetectorRef:

    constructor(private cd: ChangeDetectorRef) {}

    updateData() {
      this.data = { ...this.data, newValue: 'updated' };
      this.cd.markForCheck();  // Manually trigger change detection
    }

    Explanation: If the object is mutated directly, OnPush doesn’t detect the change. Creating a new object or using markForCheck ensures that Angular runs change detection.

5. Scenario: Implementing Route Guards for Authentication
-----------------------------------------------------------
    Question: How would you protect specific routes in your Angular application so that only authenticated users can access them?
	
    Answer: I would implement Route Guards using Angular’s CanActivate interface to protect routes. 
	
	Here’s an example of how to implement an authentication guard:

    import { Injectable } from '@angular/core';
    import { CanActivate, Router } from '@angular/router';
    import { AuthService } from './auth.service';

    @Injectable({
      providedIn: 'root'
    })
    export class AuthGuard implements CanActivate {

      constructor(private authService: AuthService, private router: Router) {}

      canActivate(): boolean {
        if (this.authService.isAuthenticated()) {
          return true;
        } else {
          this.router.navigate(['/login']);
          return false;
        }
      }
    }

    Explanation: The AuthGuard checks if the user is authenticated before allowing access to the route.
	
	If the user is not authenticated, they are redirected to the login page. 
	
	This ensures that only authorized users can access certain parts of the application.
	
	
